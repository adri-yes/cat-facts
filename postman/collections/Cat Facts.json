{
	"info": {
		"_postman_id": "effe3c79-34a5-4727-8ea7-a6b394176217",
		"name": "Cat Facts",
		"description": "**The Cat Facts API allows you to programmatically access facts about felines over the internet.** \n\n# API Reference\n\nContact Support:\n Email: contact@catfact.ninja",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "37582007-effe3c79-34a5-4727-8ea7-a6b394176217"
	},
	"item": [
		{
			"name": "Facts",
			"item": [
				{
					"name": "Returns a random fact",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba8f40d9-4f4a-4472-81bf-ca1bf97d6963",
								"exec": [
									"pm.test('Validate Schema', function () {",
									"  var jsonData = pm.response.json()",
									"  // Check fact",
									"  pm.expect(jsonData).to.have.property('fact')",
									"  pm.expect(jsonData.fact).to.be.a('string')",
									"  // Check length",
									"  pm.expect(jsonData).to.have.property('length')",
									"  pm.expect(jsonData.length).to.be.a('number')",
									"})",
									"",
									"pm.test('Status code is 200', function () {",
									"  pm.response.to.have.status(200)",
									"})",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "862c11fb-46dd-4c53-8383-f1395f6aa40e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/fact",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"fact"
							],
							"query": [
								{
									"key": "max_length",
									"value": "14003335",
									"description": "maximum length of returned fact",
									"disabled": true
								}
							]
						},
						"description": "Returns a random fact"
					},
					"response": [
						{
							"id": "e741c5cd-b0d6-40b1-908f-5679e814e3dd",
							"name": "Normal response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/fact?max_length=14003335",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"fact"
									],
									"query": [
										{
											"description": "maximum length of returned fact",
											"key": "max_length",
											"value": "14003335"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"fact\": \"nostrud\",\n  \"length\": 25191961\n}"
						},
						{
							"id": "213c0c54-fcef-4a0a-9968-dfa2469c79d7",
							"name": "Fact not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/fact?max_length=14003335",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"fact"
									],
									"query": [
										{
											"description": "maximum length of returned fact",
											"key": "max_length",
											"value": "14003335"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": []
						},
						{
							"id": "16296f76-ae0d-482b-a676-d65eb65b2c5b",
							"name": "Server Exception",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/fact",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"fact"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"fact\": \"do consequat\",\n  \"length\": -98123812\n}"
						}
					]
				},
				{
					"name": "Get a list of facts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11db5292-85bd-4a92-8fd8-a53e7a0869f7",
								"exec": [
									"// Check status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate response body structure",
									"pm.test(\"Response body is an array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;",
									"});",
									"",
									"// Check response body content",
									"pm.test(\"Each fact has required properties\", function () {",
									"    const jsonData = pm.response.json();",
									"    ",
									"    // Ensure the array is not empty",
									"    pm.expect(jsonData.length).to.be.above(0);",
									"    ",
									"    jsonData.forEach((fact) => {",
									"        // Check that each fact is a string",
									"        pm.expect(fact).to.be.a('string');",
									"        ",
									"        // Optional: Check fact length (if applicable)",
									"        pm.expect(fact.length).to.be.above(0);",
									"    });",
									"});",
									"",
									"// Check response headers",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"",
									"// Response time test",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(50);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0b2d7b69-16d1-4aaa-8299-35dd4d2f8565",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/facts?max_length=14003335&limit=14003335",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"facts"
							],
							"query": [
								{
									"key": "max_length",
									"value": "14003335"
								},
								{
									"key": "limit",
									"value": "14003335",
									"description": "limit the amount of results returned"
								}
							]
						},
						"description": "Returns a a list of facts"
					},
					"response": [
						{
							"id": "019cc25a-dbe5-430f-b6b1-a90f45bab900",
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/facts?max_length=14003335&limit=14003335",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"facts"
									],
									"query": [
										{
											"key": "max_length",
											"value": "14003335"
										},
										{
											"description": "limit the amount of results returned",
											"key": "limit",
											"value": "14003335"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						},
						{
							"id": "064593a8-2a37-46e8-afc1-b3729014c95e",
							"name": "Server Exception",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/facts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"facts"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			],
			"id": "53a96b6a-6d17-495d-bd81-0b2a32055fcd",
			"description": "Cat Facts"
		},
		{
			"name": "Breeds",
			"item": [
				{
					"name": "Returns a list of breeds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6348bb80-90d7-4546-bbaa-7b84b5096cf7",
								"exec": [
									"// Comprehensive Test Suite for Cat Facts API",
									"",
									"// Basic Response Validation",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Response Structure Validation",
									"pm.test(\"Response is a valid non-empty array\", function () {",
									"    const jsonData = pm.response.json();",
									"    ",
									"    // Check if response is an array",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;",
									"    ",
									"    // Ensure array is not empty",
									"    pm.expect(jsonData.length).to.be.above(0);",
									"});",
									"",
									"",
									"// Header Validation",
									"pm.test(\"Response headers are correct\", function () {",
									"    // Check Content-Type",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"    ",
									"    // Optional: Check other headers if applicable",
									"    const headers = pm.response.headers;",
									"    ",
									"    // Ensure no unexpected headers",
									"    const allowedHeaders = [",
									"        'content-type', ",
									"        'date', ",
									"        'server', ",
									"        'content-length', ",
									"        'connection'",
									"    ];",
									"    ",
									"    headers.forEach((header) => {",
									"        pm.expect(allowedHeaders).to.include(header.key.toLowerCase());",
									"    });",
									"});",
									"",
									"// Performance and Timing Tests",
									"pm.test(\"Response performance metrics\", function () {",
									"    // Response time test",
									"    pm.expect(pm.response.responseTime).to.be.below(100);",
									"    ",
									"    // Optional: Log response time for monitoring",
									"    console.log(`Response Time: ${pm.response.responseTime}ms`);",
									"});",
									"",
									"// Data Consistency Checks",
									"pm.test(\"No duplicate facts in response\", function () {",
									"    const jsonData = pm.response.json();",
									"    ",
									"    // Create a Set to check for unique facts",
									"    const uniqueFacts = new Set(jsonData);",
									"    ",
									"    pm.expect(uniqueFacts.size).to.equal(jsonData.length, ",
									"        \"Response contains duplicate facts\"",
									"    );",
									"});",
									"",
									"// Environment and Global Variable Tests",
									"pm.test(\"Environment and global variables are set correctly\", function () {",
									"    // Check if necessary environment variables exist",
									"    pm.expect(pm.environment.get(\"baseUrl\")).to.exist;",
									"    ",
									"    // Optional global variable check",
									"    if (pm.globals.get(\"factApiKey\")) {",
									"        pm.expect(pm.globals.get(\"factApiKey\")).to.be.a('string');",
									"    }",
									"});",
									"",
									"// Optional: Snapshot Testing",
									"pm.test(\"Response matches expected schema\", function () {",
									"    const jsonData = pm.response.json();",
									"    ",
									"    // Basic schema validation",
									"    jsonData.forEach((fact) => {",
									"        pm.expect(fact).to.be.a('string');",
									"    });",
									"    ",
									"    // Optional: Store a snapshot for comparison in future runs",
									"    if (!pm.globals.get(\"firstFactSnapshot\")) {",
									"        pm.globals.set(\"firstFactSnapshot\", JSON.stringify(jsonData[0]));",
									"    }",
									"});",
									"",
									"// Logging for Debugging",
									"console.log(\"Total facts received:\", pm.response.json().length);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "8da7c613-2829-476b-9989-f0ceec511285",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/breeds?limit=14003335",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"breeds"
							],
							"query": [
								{
									"key": "limit",
									"value": "14003335",
									"description": "This is a description"
								}
							]
						},
						"description": "Returns a a list of breeds"
					},
					"response": [
						{
							"id": "d9c0e511-a726-4a4b-8180-161b3ce38a0f",
							"name": "Normal operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/breeds?limit=14003335",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"breeds"
									],
									"query": [
										{
											"description": "This is a description",
											"key": "limit",
											"value": "14003335"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						},
						{
							"id": "cfb6e033-96c4-4079-bbb0-09bad33979df",
							"name": "Server Exception",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: basic",
										"key": "Authorization",
										"value": "Basic <credentials>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/breeds",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"breeds"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			],
			"id": "1ab14303-912d-4b5c-9d43-5607ce7cda4f",
			"description": "Breeds"
		}
	],
	"variable": [
		{
			"id": "3c3d270c-e959-44f6-a823-983f1826acde",
			"key": "baseUrl",
			"value": "https://catfact.ninja",
			"type": "any"
		}
	]
}